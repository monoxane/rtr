scalar Time

type Query {
  roles: [Role!]!

  users(showDeleted: Boolean): [User!]!

  streams: [Stream!]!
  stream(id: ID, slug: String): Stream!

  routerProviders: [RouterProvider!]!
  routers: [Router!]!
}

type Mutation {
  login(username: String!, password: String!): LoginResponse!

  createUser(user: UserUpdate!): User
  updateUser(id: Int!, user: UserUpdate!): User
  updateUserPassword(id: Int!, password: String!): Int
  deactivateUser(id: Int!): Int
  reactivateUser(id: Int!): Int

  createStream(stream: StreamUpdate!): Stream
  updateStream(id: ID!, stream: StreamUpdate!): Stream
  deleteStream(id: Int!): Int

  createRouter(router: RouterUpdate!): Router
}

type Subscription {
  stream(id: ID, slug: String): Stream
}