package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/monoxane/rtr/internal/graph"
	"github.com/monoxane/rtr/internal/graph/model"
	"github.com/monoxane/rtr/internal/repository/users"
)

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *model.User) (*int, error) {
	ret := int(obj.CreatedAt.Unix())
	return &ret, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *model.User) (*int, error) {
	ret := int(obj.UpdatedAt.Unix())
	return &ret, nil
}

// UpdatedBy is the resolver for the updatedBy field.
func (r *userResolver) UpdatedBy(ctx context.Context, obj *model.User) (*model.User, error) {
	return users.GetByID(*obj.UpdatedBy)
}

// DeletedAt is the resolver for the deletedAt field.
func (r *userResolver) DeletedAt(ctx context.Context, obj *model.User) (*int, error) {
	if obj.DeletedAt != nil {
		ret := int(obj.DeletedAt.Unix())
		return &ret, nil
	}

	zero := 0

	return &zero, nil
}

// LastLogin is the resolver for the lastLogin field.
func (r *userResolver) LastLogin(ctx context.Context, obj *model.User) (*int, error) {
	if obj.LastLogin != nil {
		ret := int(obj.LastLogin.Unix())
		return &ret, nil
	}

	zero := 0

	return &zero, nil
}

// Routers is the resolver for the routers field.
func (r *userResolver) Routers(ctx context.Context, obj *model.User) ([]*model.Router, error) {
	panic(fmt.Errorf("not implemented: Routers - routers"))
}

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
