package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/monoxane/rtr/internal/graph"
	"github.com/monoxane/rtr/internal/graph/model"
	"github.com/monoxane/rtr/internal/repository/routers"
	"github.com/monoxane/rtr/internal/repository/users"
)

// Provider is the resolver for the provider field.
func (r *routerResolver) Provider(ctx context.Context, obj *model.Router) (string, error) {
	panic(fmt.Errorf("not implemented: Provider - provider"))
}

// Model is the resolver for the model field.
func (r *routerResolver) Model(ctx context.Context, obj *model.Router) (string, error) {
	panic(fmt.Errorf("not implemented: Model - model"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *routerResolver) CreatedAt(ctx context.Context, obj *model.Router) (*int, error) {
	ret := int(obj.CreatedAt.Unix())
	return &ret, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *routerResolver) UpdatedAt(ctx context.Context, obj *model.Router) (*int, error) {
	ret := int(obj.CreatedAt.Unix())
	return &ret, nil
}

// UpdatedBy is the resolver for the updatedBy field.
func (r *routerResolver) UpdatedBy(ctx context.Context, obj *model.Router) (*model.User, error) {
	return users.GetByID(*obj.UpdatedBy)
}

// Destinations is the resolver for the destinations field.
func (r *routerResolver) Destinations(ctx context.Context, obj *model.Router) ([]*model.Destination, error) {
	panic(fmt.Errorf("not implemented: Destinations - destinations"))
}

// Sources is the resolver for the sources field.
func (r *routerResolver) Sources(ctx context.Context, obj *model.Router) ([]*model.Source, error) {
	panic(fmt.Errorf("not implemented: Sources - sources"))
}

// AdditionalConfiguration is the resolver for the additionalConfiguration field.
func (r *routerProviderResolver) AdditionalConfiguration(ctx context.Context, obj *model.RouterProvider) ([]*string, error) {
	panic(fmt.Errorf("not implemented: AdditionalConfiguration - additionalConfiguration"))
}

// Models is the resolver for the models field.
func (r *routerProviderResolver) Models(ctx context.Context, obj *model.RouterProvider) ([]*model.RouterModel, error) {
	return routers.ListProviderModels(obj.ID)
}

// Router returns graph.RouterResolver implementation.
func (r *Resolver) Router() graph.RouterResolver { return &routerResolver{r} }

// RouterProvider returns graph.RouterProviderResolver implementation.
func (r *Resolver) RouterProvider() graph.RouterProviderResolver { return &routerProviderResolver{r} }

type routerResolver struct{ *Resolver }
type routerProviderResolver struct{ *Resolver }
